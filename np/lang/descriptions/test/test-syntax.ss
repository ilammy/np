(import (scheme base)
        (only (srfi 1) every)
        (np lang descriptions errors)
        (np lang descriptions types)
        (np lang descriptions syntax)
        (np lang descriptions test-utils)
        (te base)
        (te conditions assertions)
        (te conditions define-assertion)
        (te utils verify-test-case))

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

(define non-symbols     `(42 "str" ,null? #\N () (a . d) #f (1 2 3) #(name)))
(define non-procedures  `(42 "str" null? #\N () (a . d) #f (1 2 3) #(name)))
(define non-lists       `(42 "str" null? ,null? #\N (a . d) #f #(x y z)))
(define non-productions `(42 "str" ,null? #\N #f #(name)))

(define invalid-names               (map list non-symbols))
(define invalid-predicates          (map list non-procedures))
(define invalid-meta-variables      (map list (map list non-symbols)))
(define invalid-meta-variable-lists (map list non-lists))
(define invalid-productions         (map list (map list non-productions)))
(define invalid-production-lists    (map list non-productions))
(define invalid-productions-nested `((((foo bar 42))) (((x (y . #(z))))) (((h i j ... k 4))) (((m . #\n)))))

(define-syntax collect-errors
  (syntax-rules ()
    ((_ ((thing errors) constructor) expr ...)
     (let ((errors '()))
       (guard (condition
               ((lang-error? condition) (set! errors (cons condition errors))) )
         (let ((thing constructor))
           (set! errors (reverse errors))
           expr ...) ) )) ) )

(define (name? obj) (symbol? obj))
(define (meta-var? obj) (symbol? obj))
(define (production? obj)
  (or (symbol? obj) (null? obj)
      (and (pair? obj) (production? (car obj)) (production? (cdr obj))) ) )

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

(define-test-case (syntax:terminals "Syntax checking of terminals")

  (define (make-checked-definition name predicate meta-vars)
    (check-terminal-definition
     (make-terminal-definition name predicate meta-vars) ) )

  (define-assertion (assert-terminal-definition object)
    (if (not (terminal-definition? object))
        (assert-failure)
        (with-terminal-definition object (name predicate meta-vars)
          (cond ((not (name? name))                (assert-failure))
                ((not (procedure? predicate))      (assert-failure))
                ((not (list? meta-vars))           (assert-failure))
                ((not (every meta-var? meta-vars)) (assert-failure))
                (else (assert-success object)) ) ) ) )

  (define-test ("Normal terminal")
    (collect-errors ((term errors) (make-checked-definition 'number number? '(n)))
      (assert-null errors)
      (assert-terminal-definition term) ) )

  (define-test ("Empty meta-variables")
    (collect-errors ((term errors) (make-checked-definition 'number number? '()))
      (assert-null errors)
      (assert-terminal-definition term) ) )

  (define-test ("Empty name")
    (collect-errors ((term errors) (make-checked-definition '|| null? '()))
      (assert-null errors)
      (assert-terminal-definition term) ) )

  (define-test ("Senseless predicate procedure")
    (collect-errors ((term errors) (make-checked-definition 'number * '(n)))
      (assert-null errors)
      (assert-terminal-definition term) ) )

  (define-test ("Terminal type")
    (collect-errors ((term errors) (check-terminal-definition 42))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-definition (car errors))
      (assert-terminal-definition term) ) )

  (define-test ("Terminal name" name)
    #(invalid-names)
    (collect-errors ((term errors) (make-checked-definition name null? '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-name (car errors))
      (assert-terminal-definition term) ) )

  (define-test ("Terminal predicate" predicate)
    #(invalid-predicates)
    (collect-errors ((term errors) (make-checked-definition 'number predicate '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-predicate (car errors))
      (assert-terminal-definition term) ) )

  (define-test ("Terminal meta-variable list" meta-vars)
    #(invalid-meta-variable-lists)
    (collect-errors ((term errors) (make-checked-definition 'number number? meta-vars))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-meta-var-list (car errors))
      (assert-terminal-definition term) ) )

  (define-test ("Terminal meta-variables" meta-vars)
    #(invalid-meta-variables)
    (collect-errors ((term errors) (make-checked-definition 'number number? meta-vars))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-meta-var (car errors))
      (assert-terminal-definition term) ) )

  (define-test ("Terminal name, predicate, meta-vars")
    (collect-errors ((term errors) (make-checked-definition 1 2 '(3)))
      (assert-= 3 (length errors))
      (assert-lang-error 'type:terminal-name      (list-ref errors 0))
      (assert-lang-error 'type:terminal-predicate (list-ref errors 1))
      (assert-lang-error 'type:terminal-meta-var  (list-ref errors 2))
      (assert-terminal-definition term) ) )
)
(verify-test-case! syntax:terminals)

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

(define-test-case (syntax:terminal-mods "Syntax checking of terminal modifications")

  (define (make-checked-modification name added-meta-vars removed-meta-vars)
    (check-terminal-modification
     (make-terminal-modification name added-meta-vars removed-meta-vars) ) )

  (define-assertion (assert-terminal-modification object)
    (if (not (terminal-modification? object))
        (assert-failure)
        (with-terminal-modification object (name meta-vars+ meta-vars-)
          (cond ((not (name? name))                 (assert-failure))
                ((not (list? meta-vars+))           (assert-failure))
                ((not (every meta-var? meta-vars+)) (assert-failure))
                ((not (list? meta-vars-))           (assert-failure))
                ((not (every meta-var? meta-vars-)) (assert-failure))
                (else (assert-success object)) ) ) ) )

  (define-test ("Normal terminal modification")
    (collect-errors ((term errors) (make-checked-modification 'number '(n) '(m)))
      (assert-null errors)
      (assert-terminal-modification term) ) )

  (define-test ("Empty meta-variables")
    (collect-errors ((term errors) (make-checked-modification 'number '() '()))
      (assert-null errors)
      (assert-terminal-modification term) ) )

  (define-test ("Empty name")
    (collect-errors ((term errors) (make-checked-modification '|| '() '()))
      (assert-null errors)
      (assert-terminal-modification term) ) )

  (define-test ("Terminal type")
    (collect-errors ((term errors) (check-terminal-modification 42))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-modification (car errors))
      (assert-terminal-modification term) ) )

  (define-test ("Terminal name" name)
    #(invalid-names)
    (collect-errors ((term errors) (make-checked-modification name '() '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-name (car errors))
      (assert-terminal-modification term) ) )

  (define-test ("Terminal meta-variable list (addition)" meta-vars)
    #(invalid-meta-variable-lists)
    (collect-errors ((term errors) (make-checked-modification 'number meta-vars '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-added-meta-var-list (car errors))
      (assert-terminal-modification term) ) )

  (define-test ("Terminal meta-variable list (removal)" meta-vars)
    #(invalid-meta-variable-lists)
    (collect-errors ((term errors) (make-checked-modification 'number '() meta-vars))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-removed-meta-var-list (car errors))
      (assert-terminal-modification term) ) )

  (define-test ("Terminal meta-variables (addition)" meta-vars)
    #(invalid-meta-variables)
    (collect-errors ((term errors) (make-checked-modification 'number meta-vars '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-added-meta-var (car errors))
      (assert-terminal-modification term) ) )

  (define-test ("Terminal meta-variables (removal)" meta-vars)
    #(invalid-meta-variables)
    (collect-errors ((term errors) (make-checked-modification 'number '() meta-vars))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-removed-meta-var (car errors))
      (assert-terminal-modification term) ) )

  (define-test ("Terminal name, meta-vars and list")
    (collect-errors ((term errors) (make-checked-modification 1 '(2 3) '4))
      (assert-= 3 (length errors))
      (assert-lang-error 'type:terminal-name                  (list-ref errors 0))
      (assert-lang-error 'type:terminal-added-meta-var        (list-ref errors 1))
      (assert-lang-error 'type:terminal-removed-meta-var-list (list-ref errors 2))
      (assert-terminal-modification term) ) )

  (define-test ("Terminal name, meta-vars (both types)")
    (collect-errors ((term errors) (make-checked-modification 1 '(2 3) '(4)))
      (assert-= 3 (length errors))
      (assert-lang-error 'type:terminal-name             (list-ref errors 0))
      (assert-lang-error 'type:terminal-added-meta-var   (list-ref errors 1))
      (assert-lang-error 'type:terminal-removed-meta-var (list-ref errors 2))
      (assert-terminal-modification term) ) )
)
(verify-test-case! syntax:terminal-mods)

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

(define-test-case (syntax:terminal-rems "Syntax checking of terminal removals")

  (define-test ("Terminal type" object)
    #(invalid-names)
    (collect-errors ((term errors) (check-terminal-removal object))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:terminal-removal (car errors))
      (assert-true (name? term)) ) )
)
(verify-test-case! syntax:terminal-rems)

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

(define-test-case (syntax:nonterminals "Syntax checking of nonterminals")

  (define (make-checked-definition name meta-vars productions)
    (check-nonterminal-definition
     (make-nonterminal-definition name meta-vars productions) ) )

  (define-assertion (assert-nonterminal-definition object)
    (if (not (nonterminal-definition? object))
        (assert-failure)
        (with-nonterminal-definition object (name meta-vars productions)
          (cond ((not (name? name))                    (assert-failure))
                ((not (list? meta-vars))               (assert-failure))
                ((not (every meta-var? meta-vars))     (assert-failure))
                ((not (list? productions))             (assert-failure))
                ((not (every production? productions)) (assert-failure))
                (else (assert-success object)) ) ) ) )

  (define-test ("Normal nonterminal")
    (collect-errors ((nterm errors) (make-checked-definition 'Number '(Num) '(N (n n))))
      (assert-null errors)
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Empty meta-variables")
    (collect-errors ((nterm errors) (make-checked-definition 'Number '() '(N (n n))))
      (assert-null errors)
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Empty productions")
    (collect-errors ((nterm errors) (make-checked-definition 'Number '() '()))
      (assert-null errors)
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Empty name")
    (collect-errors ((nterm errors) (make-checked-definition '|| '() '()))
      (assert-null errors)
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Nonterminal type")
    (collect-errors ((nterm errors) (check-nonterminal-definition 42))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-definition (car errors))
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Nonterminal name" name)
    #(invalid-names)
    (collect-errors ((nterm errors) (make-checked-definition name '() '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-name (car errors))
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Nonterminal meta-variable list" meta-vars)
    #(invalid-meta-variable-lists)
    (collect-errors ((nterm errors) (make-checked-definition 'Number meta-vars '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-meta-var-list (car errors))
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Nonterminal meta-variables" meta-vars)
    #(invalid-meta-variables)
    (collect-errors ((nterm errors) (make-checked-definition 'Number meta-vars '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-meta-var (car errors))
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Nonterminal production list" productions)
    #(invalid-production-lists)
    (collect-errors ((nterm errors) (make-checked-definition 'Number '() productions))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-production-list (car errors))
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Nonterminal productions" productions)
    #(invalid-productions)
    (collect-errors ((nterm errors) (make-checked-definition 'Number '() productions))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-production (car errors))
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Nonterminal productions nested" productions)
    #(invalid-productions-nested)
    (collect-errors ((nterm errors) (make-checked-definition 'Number '() productions))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-production (car errors))
      (assert-nonterminal-definition nterm) ) )

  (define-test ("Nonterminal name, meta-vars and productions")
    (collect-errors ((nterm errors) (make-checked-definition 1 '(2) '(3)))
      (assert-= 3 (length errors))
      (assert-lang-error 'type:nonterminal-name       (list-ref errors 0))
      (assert-lang-error 'type:nonterminal-meta-var   (list-ref errors 1))
      (assert-lang-error 'type:nonterminal-production (list-ref errors 2))
      (assert-nonterminal-definition nterm) ) )
)
(verify-test-case! syntax:nonterminals)

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

(define-test-case (syntax:nonterminal-mods "Syntax checking of nonterminal modifications")

  (define (make-checked-modification name added-meta-vars removed-meta-vars added-productions removed-productions)
    (check-nonterminal-modification
     (make-nonterminal-modification name added-meta-vars removed-meta-vars added-productions removed-productions) ) )

  (define-assertion (assert-nonterminal-modification object)
    (if (not (nonterminal-modification? object))
        (assert-failure)
        (with-nonterminal-modification object (name meta-vars+ meta-vars- productions+ productions-)
          (cond ((not (name? name))                     (assert-failure))
                ((not (list? meta-vars+))               (assert-failure))
                ((not (every meta-var? meta-vars+))     (assert-failure))
                ((not (list? meta-vars-))               (assert-failure))
                ((not (every meta-var? meta-vars-))     (assert-failure))
                ((not (list? productions+))             (assert-failure))
                ((not (every production? productions+)) (assert-failure))
                ((not (list? productions-))             (assert-failure))
                ((not (every production? productions-)) (assert-failure))
                (else (assert-success object)) ) ) ) )

  (define-test ("Normal nonterminal modification")
    (collect-errors ((nterm errors) (make-checked-modification 'Number '(Num) '(Number) '(n (r i)) '((C r i))))
      (assert-null errors)
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Empty meta-variables")
    (collect-errors ((nterm errors) (make-checked-modification 'Number '() '() '(n (r i)) '((C r i))))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Empty productions")
    (collect-errors ((nterm errors) (make-checked-modification 'Number '() '() '() '()))
      (assert-null errors)
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Empty name")
    (collect-errors ((nterm errors) (make-checked-modification '|| '() '() '() '()))
      (assert-null errors)
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal type")
    (collect-errors ((nterm errors) (check-nonterminal-modification 42))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-modification (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal name" name)
    #(invalid-names)
    (collect-errors ((nterm errors) (make-checked-modification name '() '() '() '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-name (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal meta-variable list (addition)" meta-vars)
    #(invalid-meta-variable-lists)
    (collect-errors ((nterm errors) (make-checked-modification 'Number meta-vars '() '() '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-added-meta-var-list (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal meta-variable list (removal)" meta-vars)
    #(invalid-meta-variable-lists)
    (collect-errors ((nterm errors) (make-checked-modification 'Number '() meta-vars '() '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-removed-meta-var-list (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal meta-variables (addition)" meta-vars)
    #(invalid-meta-variables)
    (collect-errors ((nterm errors) (make-checked-modification 'Number meta-vars '() '() '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-added-meta-var (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal meta-variables (removal)" meta-vars)
    #(invalid-meta-variables)
    (collect-errors ((nterm errors) (make-checked-modification 'Number '() meta-vars '() '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-removed-meta-var (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal production list (addition)" productions)
    #(invalid-production-lists)
    (collect-errors ((nterm errors) (make-checked-modification 'Number '() '() productions '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-added-production-list (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal production list (removal)" productions)
    #(invalid-production-lists)
    (collect-errors ((nterm errors) (make-checked-modification 'Number '() '() '() productions))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-removed-production-list (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal productions (addition)" productions)
    #(invalid-productions)
    (collect-errors ((nterm errors) (make-checked-modification 'Number '() '() productions '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-added-production (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal productions (removal)" productions)
    #(invalid-productions)
    (collect-errors ((nterm errors) (make-checked-modification 'Number '() '() '() productions))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-removed-production (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal productions nested (addition)" productions)
    #(invalid-productions-nested)
    (collect-errors ((nterm errors) (make-checked-modification 'Number '() '() productions '()))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-added-production (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal productions nested (removal)" productions)
    #(invalid-productions-nested)
    (collect-errors ((nterm errors) (make-checked-modification 'Number '() '() '() productions))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-removed-production (car errors))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal name, meta-vars, productions and list")
    (collect-errors ((nterm errors) (make-checked-modification 1 '(2 3) '4 '5 '(6 7)))
      (assert-= 5 (length errors))
      (assert-lang-error 'type:nonterminal-name                  (list-ref errors 0))
      (assert-lang-error 'type:nonterminal-added-meta-var        (list-ref errors 1))
      (assert-lang-error 'type:nonterminal-removed-meta-var-list (list-ref errors 2))
      (assert-lang-error 'type:nonterminal-added-production-list (list-ref errors 3))
      (assert-lang-error 'type:nonterminal-removed-production    (list-ref errors 4))
      (assert-nonterminal-modification nterm) ) )

  (define-test ("Nonterminal name, meta-vars, productions (both types)")
    (collect-errors ((nterm errors) (make-checked-modification 1 '(2 3) '(4) '(5 6) '(7 #(8))))
      (assert-= 5 (length errors))
      (assert-lang-error 'type:nonterminal-name               (list-ref errors 0))
      (assert-lang-error 'type:nonterminal-added-meta-var     (list-ref errors 1))
      (assert-lang-error 'type:nonterminal-removed-meta-var   (list-ref errors 2))
      (assert-lang-error 'type:nonterminal-added-production   (list-ref errors 3))
      (assert-lang-error 'type:nonterminal-removed-production (list-ref errors 4))
      (assert-nonterminal-modification nterm) ) )
)
(verify-test-case! syntax:nonterminal-mods)

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ;

(define-test-case (syntax:nonterminal-rems "Syntax checking of nonterminal removals")

  (define-test ("Terminal type" object)
    #(invalid-names)
    (collect-errors ((term errors) (check-nonterminal-removal object))
      (assert-= 1 (length errors))
      (assert-lang-error 'type:nonterminal-removal (car errors))
      (assert-true (name? term)) ) )
)
(verify-test-case! syntax:nonterminal-rems)
